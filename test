local AtomUI = {
    Settings = {
        Theme = {
            Background = Color3.fromRGB(25, 25, 25),
            Accent = Color3.fromRGB(65, 105, 255),
            Secondary = Color3.fromRGB(35, 35, 35),
            TextColor = Color3.fromRGB(255, 255, 255)
        },
        Animation = {
            Duration = 0.3,
            Style = Enum.EasingStyle.Quart
        }
    }
}

-- Services
local TweenService = game:GetService("TweenService")
local CoreGui = game:GetService("CoreGui")
local UserInputService = game:GetService("UserInputService")

-- Helper Functions
local function CreateInstance(className, properties)
    local instance = Instance.new(className)
    for property, value in pairs(properties) do
        instance[property] = value
    end
    return instance
end

local function AddCorner(parent, radius)
    return CreateInstance("UICorner", {
        CornerRadius = UDim.new(0, radius or 6),
        Parent = parent
    })
end

function AtomUI:CreateWindow(title)
    -- Validate input
    assert(type(title) == "string", "Title must be a string")
    
    -- Create GUI
    local GUI = CreateInstance("ScreenGui", {
        Name = "AtomUI",
        Parent = CoreGui,
        ResetOnSpawn = false
    })
    
    -- Main Frame
    local Main = CreateInstance("Frame", {
        Name = "Main",
        Size = UDim2.new(0, 550, 0, 350),
        Position = UDim2.new(0.5, -275, 0.5, -175),
        BackgroundColor3 = self.Settings.Theme.Background,
        Parent = GUI
    })
    AddCorner(Main)
    
    -- Title Bar
    local TitleBar = CreateInstance("Frame", {
        Name = "TitleBar",
        Size = UDim2.new(1, 0, 0, 35),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        Parent = Main
    })
    AddCorner(TitleBar)
    
    -- Title Text
    local TitleText = CreateInstance("TextLabel", {
        Name = "Title",
        Size = UDim2.new(1, -10, 1, 0),
        Position = UDim2.new(0, 10, 0, 0),
        BackgroundTransparency = 1,
        Text = title,
        TextColor3 = self.Settings.Theme.TextColor,
        TextSize = 16,
        Font = Enum.Font.GothamBold,
        TextXAlignment = Enum.TextXAlignment.Left,
        Parent = TitleBar
    })
    
    -- Close Button
    local CloseButton = CreateInstance("TextButton", {
        Name = "Close",
        Size = UDim2.new(0, 30, 0, 30),
        Position = UDim2.new(1, -35, 0, 3),
        BackgroundColor3 = Color3.fromRGB(255, 70, 70),
        Text = "Ã—",
        TextColor3 = Color3.fromRGB(255, 255, 255),
        TextSize = 20,
        Font = Enum.Font.GothamBold,
        Parent = TitleBar
    })
    AddCorner(CloseButton, 4)
    
    -- Make window draggable
    local dragging, dragInput, dragStart, startPos = false
    
    TitleBar.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = true
            dragStart = input.Position
            startPos = Main.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - dragStart
            Main.Position = UDim2.new(
                startPos.X.Scale,
                startPos.X.Offset + delta.X,
                startPos.Y.Scale,
                startPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            dragging = false
        end
    end)
    
    -- Close button functionality
    CloseButton.MouseButton1Click:Connect(function()
        GUI:Destroy()
    end)
    
    -- Tab System
    local TabContainer = CreateInstance("ScrollingFrame", {
        Name = "TabContainer",
        Size = UDim2.new(0, 130, 1, -45),
        Position = UDim2.new(0, 10, 0, 40),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        ScrollBarThickness = 2,
        ScrollBarImageColor3 = self.Settings.Theme.Accent,
        Parent = Main
    })
    AddCorner(TabContainer)
    
    local TabList = CreateInstance("UIListLayout", {
        Padding = UDim.new(0, 5),
        Parent = TabContainer
    })
    
    local TabPadding = CreateInstance("UIPadding", {
        PaddingTop = UDim.new(0, 5),
        PaddingLeft = UDim.new(0, 5),
        PaddingRight = UDim.new(0, 5),
        Parent = TabContainer
    })
    
    -- Content Container
    local ContentContainer = CreateInstance("Frame", {
        Name = "ContentContainer",
        Size = UDim2.new(1, -150, 1, -45),
        Position = UDim2.new(0, 140, 0, 40),
        BackgroundColor3 = self.Settings.Theme.Secondary,
        Parent = Main
    })
    AddCorner(ContentContainer)
    
    local Window = {}
    
    function Window:CreateTab(name)
        local Tab = {}
        
        -- Tab Button
        local TabButton = CreateInstance("TextButton", {
            Name = name,
            Size = UDim2.new(1, -10, 0, 30),
            BackgroundColor3 = self.Settings.Theme.Secondary,
            Text = name,
            TextColor3 = self.Settings.Theme.TextColor,
            TextSize = 14,
            Font = Enum.Font.Gotham,
            Parent = TabContainer
        })
        AddCorner(TabButton)
        
        -- Tab Content
        local TabContent = CreateInstance("ScrollingFrame", {
            Name = name.."Content",
            Size = UDim2.new(1, -20, 1, -20),
            Position = UDim2.new(0, 10, 0, 10),
            BackgroundTransparency = 1,
            ScrollBarThickness = 2,
            ScrollBarImageColor3 = self.Settings.Theme.Accent,
            Visible = false,
            Parent = ContentContainer
        })
        
        local ContentList = CreateInstance("UIListLayout", {
            Padding = UDim.new(0, 5),
            Parent = TabContent
        })
        
        -- Tab Functions
        function Tab:AddButton(text, callback)
            local Button = CreateInstance("TextButton", {
                Size = UDim2.new(1, 0, 0, 32),
                BackgroundColor3 = self.Settings.Theme.Background,
                Text = text,
                TextColor3 = self.Settings.Theme.TextColor,
                TextSize = 14,
                Font = Enum.Font.Gotham,
                Parent = TabContent
            })
            AddCorner(Button)
            
            Button.MouseButton1Click:Connect(callback)
            
            -- Hover Effect
            Button.MouseEnter:Connect(function()
                TweenService:Create(Button, 
                    TweenInfo.new(0.2), 
                    {BackgroundColor3 = self.Settings.Theme.Accent}
                ):Play()
            end)
            
            Button.MouseLeave:Connect(function()
                TweenService:Create(Button, 
                    TweenInfo.new(0.2), 
                    {BackgroundColor3 = self.Settings.Theme.Background}
                ):Play()
            end)
        end
        
        -- Tab Button Click Handler
        TabButton.MouseButton1Click:Connect(function()
            for _, content in pairs(ContentContainer:GetChildren()) do
                if content:IsA("ScrollingFrame") then
                    content.Visible = false
                end
            end
            TabContent.Visible = true
            
            for _, button in pairs(TabContainer:GetChildren()) do
                if button:IsA("TextButton") then
                    TweenService:Create(button, 
                        TweenInfo.new(0.2), 
                        {BackgroundColor3 = self.Settings.Theme.Secondary}
                    ):Play()
                end
            end
            TweenService:Create(TabButton, 
                TweenInfo.new(0.2), 
                {BackgroundColor3 = self.Settings.Theme.Accent}
            ):Play()
        end)
        
        -- Show first tab by default
        if #TabContainer:GetChildren() == 3 then
            TabContent.Visible = true
            TabButton.BackgroundColor3 = self.Settings.Theme.Accent
        end
        
        -- Update ScrollingFrame canvas size
        ContentList:GetPropertyChangedSignal("AbsoluteContentSize"):Connect(function()
            TabContent.CanvasSize = UDim2.new(0, 0, 0, ContentList.AbsoluteContentSize.Y)
        end)
        
        return Tab
    end
    
    return Window
end

return AtomUI
